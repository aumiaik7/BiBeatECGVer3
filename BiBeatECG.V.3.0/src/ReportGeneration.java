
//import com.lowagie.text.Document;
import java.io.File;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXhtmlExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.export.oasis.JROdsExporter;
import net.sf.jasperreports.engine.export.oasis.JROdtExporter;
import net.sf.jasperreports.engine.export.ooxml.JRDocxExporter;
import net.sf.jasperreports.engine.export.ooxml.JRPptxExporter;
import net.sf.jasperreports.engine.export.ooxml.JRXlsxExporter;
import net.sf.jasperreports.engine.query.JRXPathQueryExecuterFactory;
import net.sf.jasperreports.engine.util.AbstractSampleApp;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.util.JRProperties;
import net.sf.jasperreports.engine.util.JRXmlUtils;
import net.sf.jasperreports.view.JasperViewer;
import org.w3c.dom.Document;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReportGeneration.java
 *
 * Created on Jan 16, 2012, 1:24:12 PM
 */
/**
 *
 * @author Brute Force
 */
public class ReportGeneration extends javax.swing.JFrame {
    
    //FileWriter outputStream = null;
    String path = null;

    /** Creates new form ReportGeneration */
    public ReportGeneration() {
        
        ImageIcon img = new ImageIcon("./Info/ecg-icon.png");
        this.setIconImage(img.getImage());
        this.setLocationRelativeTo(null);
        initComponents();
        jFileChooser2.setCurrentDirectory(new File("./Database"));
         
       JRProperties.setProperty("net.sf.jasperreports.xpath.executer.factory","net.sf.jasperreports.engine.util.xml.JaxenXPathExecuterFactory");
        //setLocation(100, 100);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser2 = new javax.swing.JFileChooser();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jFileChooser2.setCurrentDirectory(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Report Generation From Existing File");

        jButton1.setText("Browse xml file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generate Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       
                
        int returnVal = jFileChooser2.showOpenDialog(null);
          
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser2.getSelectedFile();
            path = file.getAbsolutePath();
            jTextField1.setText(file.toString());
            //outputStream = file.getAbsolutePath();


            // ... code that loads the contents of the file in the text area
        } //else {
        // ...
   // }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
 
        JasperReport jasperReport = null;
        JasperViewer jv = null;
        JasperPrint jprint = null;
                long start = System.currentTimeMillis();
        
        Map params = new HashMap();
        
//		Document document = JRXmlUtils.parse(JRLoader.getLocationInputStream("data/northwind.xml"));
        Document document = null;
            try 
            {
                //File file2 = new File("./report/"+sourceFile);
                //file2 = file2.getAbsoluteFile();
                //document = JRXmlUtils.parse(JRLoader.getLocationInputStream(file2+""));
                document = (Document) JRXmlUtils.parse(JRLoader.getLocationInputStream(path));
                //document = JRXmlUtils.parse(JRLoader.getLocationInputStream("C:/Program Files/Common Files/ECG_BMPT/report/"+sourceFile));
                //document = JRXmlUtils.parse(JRLoader.getLocationInputStream("report/Ahamad Imtiaz.xml"));
            } 
            catch (JRException ex) {
                Logger.getLogger(EcgDisplay.class.getName()).log(Level.SEVERE, null, ex);
            }
		params.put(JRXPathQueryExecuterFactory.PARAMETER_XML_DATA_DOCUMENT, document);
		params.put(JRXPathQueryExecuterFactory.XML_DATE_PATTERN, "yyyy-MM-dd");
		params.put(JRXPathQueryExecuterFactory.XML_NUMBER_PATTERN, "#,##0.##");
		params.put(JRXPathQueryExecuterFactory.XML_LOCALE, Locale.ENGLISH);
		params.put(JRParameter.REPORT_LOCALE, Locale.US);
		
                 //jasperReport = JasperCompileManager.compileReport("reports/CustomersReport.jrxml");
		//JasperFillManager.fillReportToFile(jasperReport, params);
//                 net.sf.jasperreports.engine.JasperPrint jprint = JasperFillManager.fillReport("reports/CustomersReport.jasper", params);
                
            try 
            {
                //File file3 = new File("./report/EcgReport.jasper");
                //file3 = file3.getAbsoluteFile();
                //jprint = JasperFillManager.fillReport(file3+"", params);
                
                jprint = JasperFillManager.fillReport("./report/EcgReport.jasper", params);
                //jprint = JasperFillManager.fillReport("C:/Program Files/Common Files/ECG_BMPT/report/EcgReport.jasper", params);
            } 
            catch (JRException ex) {
                Logger.getLogger(EcgDisplay.class.getName()).log(Level.SEVERE, null, ex);
            }
                jv = new JasperViewer(jprint, false);
                jv.setTitle("ECG Report");
                jv.setAlwaysOnTop(true);
                jv.setVisible(true);
                //jv.viewReport(jprint,false);
		System.err.println("Filling time : " + (System.currentTimeMillis() - start));
            try {
                JasperExportManager.exportReportToPdfFile(jprint, "./report/EcgReport.pdf");
            } catch (JRException ex) {
                Logger.getLogger(EcgDisplay.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ReportGeneration().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
